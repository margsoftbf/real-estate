name: CI/CD Backend

on:
  push:
    branches: [main, staging]
    paths:
      - 'backend/**'
  pull_request:
    branches: [main, staging]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: ['20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'backend/yarn.lock'

      - name: Install dependencies
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: Build project
        working-directory: ./backend
        run: yarn build

      - name: Run unit tests
        working-directory: ./backend
        run: yarn test

      - name: Run e2e tests
        working-directory: ./backend
        run: yarn test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          SUPABASE_URL: https://test-supabase-url.com
          SUPABASE_KEY: test-key-does-not-matter

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: 'backend/yarn.lock'

      - name: Install dependencies
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: Run migrations
        working-directory: ./backend
        run: yarn migration:run
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Vercel
        run: echo "Auto-deploy via Vercel GitHub integration"
